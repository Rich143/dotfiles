" ********************************************************************
" CUSTOM Section:
"
" Owner: Michel Rochon
" Last change:	2009 Nov 03
"
" Note:
"   If any options added here doesn't work, try looking at the file
"   "Vim/_vimrc".  It could be that the mswin.vim overwrites the 
"   options that are being set here.
"   Example of such cases:
"       - "behave xterm"
"       - set guioptions += a
"
"   Other files of interrest:
"   - "Vim/_vimrc"          ... contains some default that you may want to
"                               overwrite.
"   - "Vim/vim72/menu.vim"  ... if you want to change/add any menu.
"
"   Files of interrest for cscope (in /usr/bin, or ~/username/bin/ or 
"   ~/username/bin/cscope):
"   - cscope.exe            ... the actual win-32 cscope executable used by gvim
"   - cscope_gen_db.bat     ... used by gvim mapped keys below to rebuild
"                               the database.
"   - cscope_gen_file_list  ... bash script used by cscope_gen_db.bat
"   - cscope_file_list      ... FileList generated by GenFileList and used
"                               in cscope_gen_db.bat to create the actual db.
"   - cscope_kill.vim       ... vim script file to remove/kill previous cscope
"                               db from gvim before rebuilding the db.
"                               Used by the mapped key that builds/rebuild the
"                               db.
"   - $WS\db.out            ... Actual db.  Loaded anytime gvim starts (as
"                               specified below).
" ********************************************************************
"if has("unix")
"  let $HOME="/home/jlabonte"
"else
  "let $HOME="c:/jlabonte"
  "let $HOME="D:/Documents\ and\ Settings/jlabonte/My\ Documents/"
"endif
let $DEFAULT_PANOS_WS= $HOME . '\ws\panos\wddicsa'

" ***********
" CSCOPE Cfg:
" *********** 
if has("cscope")

    "************************************************************
    " Function GetWsDb:  Gets the WS DB path.  It uses the current
    "                    working directory to figure the correct DB
    "                    to use.
    "                    More specifically, this functions looks for
    "                    "panos", "wddicsa" & "dps".
    "
    " Note: This function finds the last instance of panos in the 
    "       current working directory.  It should work for workspace
    "       where there is multple instances of the word panos.
    "
    " 01.25.2010: Michel Rochon
    "************************************************************
    :function GetWsDb()
      let WS_DB=getcwd()

"      " Find last occurence of panos in WS_DB:
      if ( -1 != match(WS_DB, "panos", 0) ) 
        if ( -1 != stridx(WS_DB, "dps") ) 
"          " DPS was found in the current directory.  
"          " Use this for cscope & tags.
          let idx=stridx(WS_DB, "dps")
        elseif ( -1 != stridx(WS_DB, "wddicsa") ) 
"          " WDDICSA was found in the current directory.  
"          " Use this for cscope & tags.
          let idx=stridx(WS_DB, "wddicsa")
        else
"          " Fallback to panos...
"          " Use this for cscope & tags.
          let idx=strridx(WS_DB, "panos")
        endif
"
"        " Find the "\" in the subdirectory:
"        " [NOte: for MSWin or Dos it's a "\\"; for linux this would be '/']
        if has("unix")
          let idx=match(WS_DB, "/", idx)
        else
          let idx=match(WS_DB, "\\", idx)
        endif
"
        if ( -1 == idx )
"          " The character "\" wasn't found, therefore use the entire directory.
          let idx=strlen(WS_DB)
        endif
"
        let WS_DB=strpart(WS_DB, 0, idx)
      else
"        " Default to my 0.0 panos (wddicsa):
"        "let WS_DB= $DEFAULT_PANOS_WS
        let WS_DB=0
      endif
"
      return WS_DB
    :endfunction

    "************************************************************
    " Function CsBuildDb:  Builds the cscope database from whatever
    "                      is specified by GetWsDb().
    "
    " 01.25.2010: Michel Rochon
    "************************************************************
    :function CsBuildDb()
      " Store the current directory and cd to WS_DB:
      let prev_pwd=getcwd()
      let $WS_DB=GetWsDb()
      exe "cd " $HOME

      " Remove our current connection to any cscope db (DB# 0)
      " Then build the new database along with tags, then add the db.
      exe $cs_kill_cmd
      exe $cs_gen_db
      exe 'cs add '   . $WS_DB . '/cscope.db'
      exe 'set tags=' . $WS_DB . '/tags'

      " Restore the prev directory
      exe "cd " prev_pwd
    :endfunction

    ":function CsBuildDbAsync()
      "" Store the current directory and cd to WS_DB:
      "let prev_pwd=getcwd()
      "let $WS_DB=GetWsDb()
      "exe "cd " $HOME

      "" Remove our current connection to any cscope db (DB# 0)
      "" Then build the new database along with tags, then add the db.
      ""exe $cs_kill_cmd
      "Start $cs_gen_db
      "exe 'cs add '   . $WS_DB . '/cscope.db'
      "exe 'set tags=' . $WS_DB . '/tags'

      "" Restore the prev directory
      "exe "cd " prev_pwd
    ":endfunction

    "************************************************************
    " Function CsSwapDb:  Swaps the cscope database from whatever
    "                     is specified by GetWsDb().
    "
    " 01.25.2010: Michel Rochon
    "************************************************************
    :function CsSwapDb()
      " Don't store the current directory!
      let $WS_DB=GetWsDb()
      exe "cd " $WS_DB

"      " Walk through the "panos", "wddicsa" & "dps"
"      if ( -1 != stridx($WS_DB, "dps") ) 
"        " Currently in "panos/wddicsa/wdds/dps" directory, go to "panos"
"        exe "cd ../../.."
"      elseif ( -1 != stridx($WS_DB, "wddicsa") ) 
"        " Currently in "panos/wddicsa" directory, go to "wdds/dps"
"        exe "cd wdds/dps"
"      else
"        " Currently in "panos" directory, go to "wddicsa"
"        exe "cd wddicsa"
"      endif

      let $WS_DB=getcwd()

      " Remove our current connection to any cscope db (DB# 0)
      " Then add the new one.
      :exe $cs_kill_cmd
      if ( -1 != findfile("cscope.db",".;") )
        exe 'cs add '   . $WS_DB . '/cscope.db'
      endif
      if ( -1 != findfile("tags",".;") )
        exe 'set tags=' . $WS_DB . '/tags'
      endif
    :endfunction

    "************************************************************
    " Function CsLoadDb:  Loads the cscope database from whatever
    "                     is specified by GetWsDb().
    "
    " Note: "set tags=tags;/" doesn't work... tags sometimes loads
    "       the same entry from multiple database!
    " 01.25.2010: Michel Rochon
    "************************************************************
    :function CsLoadDb()
      " Store the current directory and cd to WS_DB:
      let prev_pwd=getcwd()
      let $WS_DB=GetWsDb()

      " Check if WS DB was set...
      if ( -1 != match($WS_DB, "ws", 0) ) 
        " Remove our current connection to any cscope db (DB# 0)
        " Then add the new one.
        :exe $cs_kill_cmd

        if ( -1 != findfile("cscope.db",".;") )
          silent exe 'cs add '   . $WS_DB . '/cscope.db'
        endif
        if ( -1 != findfile("tags",".;") )
          silent exe 'set tags=' . $WS_DB . '/tags'
        endif
      endif
    :endfunction

    "*********************************************
    " To build the Windows cscope database:
    " From a cygwin or bash or tcsh shell:
    " 	cscope -b -f db.out -i fileList.cs -v
    " From gvim, simply hit the <C-F4> key
    " For gvim help on cscope, type ":help cscope"
    "*********************************************
    
    " My defaults for WorkSpace
    let cs_path         = '$HOME'         . '/bin/cscope'
    let $cs_kill_cmd    ="source "      . cs_path       . "/cscope_kill.vim"
    if has("unix")
      let $cs_gen_db      ="!"            . cs_path       . "/cscope_gen_db.sh"
    else
      let $cs_gen_db      ="!"            . cs_path       . "/cscope_gen_db.bat"
    endif

    " Cfg cscope & Load my default cscope db...
    if has("unix")
      exe "set csprg=/usr/bin/cscope"
    else
      exe "set csprg=" . cs_path . "/cscope.exe"
    endif
    exe CsLoadDb()

    "set csto=0
    set csto=1
    set cst
    set nocsverb

    "GVim Editors Commands/Keys:
    "   <S-F1>      -Find this C symbol                        (0 or s)
    "   <S-F2>      -Find this definition                      (1 or g)
    "   <S-F3>      -Find functions called by this function    (2 or d)
    "   <S-F4>      -Find functions calling this function      (3 or c)
    "   <S-F5>      -Find this text string                     (4 or t)
    "   <S-F6>      -Find this egrep pattern                   (6 or e)
    "   <S-F7>      -Find this file                            (7 or f)
    "   <S-F8>      -Find files #including this file           (8 or i)
    "
    "   <C-F2>      -Re-Load and show current cscope DB.
    "   <C-F3>      -DB Switch (switch from "panos" db, to "wddicsa" db, to "dps" db).
    "   <C-F4>      -DB Build... (it first regenerates the file list)
    map <S-F1>      :cs find 0 <C-R>=expand("<cword>")<CR><CR>
    map <S-F2>      :cs find 1 <C-R>=expand("<cword>")<CR><CR>
    map <S-F3>      :cs find 2 <C-R>=expand("<cword>")<CR><CR>
    map <S-F4>      :cs find 3 <C-R>=expand("<cword>")<CR><CR>
    map <S-F5>      :cs find 4 <C-R>=expand("<cword>")<CR><CR>
    map <S-F6>      :cs find 6 <C-R>=expand("<cword>")<CR><CR>
    map <S-F7>      :cs find 7 <C-R>=expand("<cword>")<CR><CR>
    map <S-F8>      :cs find 8 %<CR>

    map <C-F2>      :mark`<CR>:exe CsLoadDb()<CR>``:exe "cs sh"<CR>
"    map <C-F3>      :mark`<CR>:exe CsSwapDb()<CR>``:exe "cs sh"<CR>
    map <C-F4>      :mark`<CR>:exe CsBuildDb()<CR>``:exe "cs sh"<CR>

endif


